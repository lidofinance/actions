name: Deploy IPFS Base

on:
  workflow_call:
    inputs:
      current_branch:
        description: "Current branch"
        required: true
        type: string
      ipfs_folder:
        description: "IPFS build folder"
        required: true
        type: string
      is_create_release:
        description: "Create github release"
        default: false
        type: boolean
    secrets:
      W3S_TOKEN:
        description: "Web3Storage token"
        required: true
      GW3_TOKEN:
        description: "Gateway3 token"

permissions:
  contents: write

jobs:
  deploy-ipfs:
    env:
      FILE_NAME: ipfs_source_code
    runs-on: ubuntu-latest
    environment: IPFS
    name: Pin to IPFS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: ${{ inputs.ipfs_folder }}
          path: ${{ inputs.ipfs_folder }}
      - name: IPFS pinning
        id: pinning
        run: |
          export BODY_RESULT=`npx -y blumen@0.0.0 deploy $PATH_TO_IPFS_CONTENT`
          echo "$BODY_RESULT" >> $GITHUB_STEP_SUMMARY
          echo "BODY_RESULT<<EOF" >> $GITHUB_OUTPUT   
          echo "$BODY_RESULT" >> $GITHUB_OUTPUT   
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          BLUMEN_W3S_TOKEN: ${{ secrets.W3S_TOKEN }}
          BLUMEN_GW3_TOKEN: ${{ secrets.GW3_TOKEN }}
          PATH_TO_IPFS_CONTENT: ${{ inputs.ipfs_folder }}
      - name: Create ipfs source code archive
        if: inputs.is_create_release
        id: car
        run: |
          mv $PATH_TO_IPFS_CAR ./$FILE_NAME.car
          zip -r $FILE_NAME.zip $PATH_TO_IPFS_CONTENT/
        env:
          PATH_TO_IPFS_CAR: "/tmp/${{ inputs.ipfs_folder }}.car"
          FILE_NAME: ${{ env.FILE_NAME }}
      - name: Set output tag and date
        if: inputs.is_create_release
        id: vars
        run: |
          echo "TAG=`echo $(git describe --abbrev=0 --tags)`" >> $GITHUB_OUTPUT
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Get release body from existing release
        if: inputs.is_create_release
        id: body
        run: |
          export EXISTING_BODY=`gh release view $TAG --json body | jq -r '.body'`
          export EXISTING_TITLE=`gh release view $TAG --json name | jq -r '.name'`
          echo "EXISTING_BODY<<EOF" >> $GITHUB_OUTPUT   
          echo "$EXISTING_BODY" >> $GITHUB_OUTPUT   
          echo "EOF" >> $GITHUB_OUTPUT
          echo "EXISTING_TITLE<<EOF" >> $GITHUB_OUTPUT
          echo "$EXISTING_TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          TAG: ${{ steps.vars.outputs.TAG }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create or update IPFS release draft
        if: inputs.is_create_release
        run: >
          if gh release view $TAG;
            then gh release edit $TAG --notes "$BODY" -t "$TITLE" && gh release upload $TAG $FILE_NAME.car $FILE_NAME.zip --clobber;
            else gh release create $TAG --target=$TARGET -t "$TITLE" --notes "$BODY" --draft && gh release upload $TAG $FILE_NAME.car $FILE_NAME.zip;
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BODY: "${{ steps.body.outputs.EXISTING_BODY }}\n\n${{ steps.pinning.outputs.BODY_RESULT }}"
          TAG: ${{ steps.vars.outputs.TAG }}
          TITLE: "${{ steps.body.outputs.EXISTING_TITLE }} (IPFS Pinning ${{ steps.vars.outputs.DATE }})"
          TARGET: ${{ inputs.current_branch }}
          FILE_NAME: ${{ env.FILE_NAME }}
